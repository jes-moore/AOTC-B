{
    "collab_server" : "",
    "contents" : "library(zoo)\nlibrary(data.table)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(shiny)\nlibrary(DT)\nlibrary(reshape2)\nlibrary(xts)\nlibrary(curl)\nlibrary(dygraphs)\nlibrary(RMySQL)\nlibrary(scales)\nshinyServer(function(input, output,session){\n        #selectable tickers\n        stockTickers <- as.vector(read.csv('data/tickers.csv'))\n        names(stockTickers) <- 'Tickers'\n        \n        output$thisTicker <- renderText(paste(input$ticker,'(Update Ticker On First Tab)'))\n        output$Yearly_Financials <- renderText('Yearly Financials')\n        output$Quarterly_Financials <- renderText('Quarterly Financials')\n        \n        #Loads the data based on selected share price and date range\n        input_data <- reactive({\n                req(input$ticker %in% stockTickers[[1]])\n\n                withProgress(message = 'Downloading Stock Data', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.01)\n                        }\n                })\n                \n                #\n                if(input$split == TRUE){\n                        apiCall <- paste(\"https://www.quandl.com/api/v3/datatables/WIKI/PRICES.csv?date.gte=20000101&ticker=\", input$ticker,\n                                  \"&qopts.columns=date,adj_open,adj_high,adj_low,adj_close,volume,ex-dividend&api_key=Xa-XyezxZxsEZpmhKYkt\",sep=\"\")\n                }\n                if(input$split == FALSE){\n                        apiCall <- paste(\"https://www.quandl.com/api/v3/datatables/WIKI/PRICES.csv?date.gte=20000101&ticker=\", input$ticker,\n                                         \"&qopts.columns=date,open,high,low,close,volume,ex-dividend&api_key=Xa-XyezxZxsEZpmhKYkt\",sep=\"\")\n                }\n\n                x <- fread(apiCall)\n                if(nrow(x) < 1){\n                        x <- tq_get(input$ticker,'stock.prices')\n                }\n                #x <- tq_get(input$ticker,get='stock.prices')\n                \n                x$date <- as.Date(x$date)\n                return(x)\n                })\n        #Takes input data, runs through the creation of ma's and other trading indicators, outputs df\n        cutdata <- reactive({\n                x <- input_data()\n                withProgress(message = 'Computing Indicators', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.01)\n                        }\n                })\n                colnames(x) <- c(\"Date\",\"Open\",\"High\",\"Low\",\"Close\",\"Volume\",'Dividend')\n                x <- x[,1:6]\n                x$MA <- SMA(x = x$Close,n=input$smaval)\n                x$MA <- round(x$MA,2)\n                x$EMA <- EMA(x = x$Close,n=input$emaval)\n                x$EMA <- round(x$EMA,2)\n                #boll <- BBands(HLC = x[,c(3,4,5)],n = input$bollval)\n                #x <- cbind(x,boll)\n                x$RSI <- RSI(x$Close)\n                x$EMA12 <- EMA(x = x$Close,n = 12)\n                x$EMA26 <- EMA(x = x$Close,n = 26)\n                x$MACD <- x$EMA12 - x$EMA26\n                x$SIGNAL <- EMA(x = x$MACD,n = 9)\n                mfi <- MFI(HLC = x[,c(\"High\",\"Low\",\"Close\")],x[,\"Volume\"],n=14)\n                x <- cbind(x,mfi)\n                #x <- x[(x$Date >= as.Date(input$dates[1],format=\"%Y-%m-%d\")) & (x$Date <= as.Date(input$dates[2],format=\"%Y-%m-%d\")),]\n                x$Date <- as.Date(x$Date,format=\"%Y-%m-%d\")\n                x <- na.exclude(x)\n                x <- xts(x[,-1],x$Date)\n                return(x)\n                })\n        \n        # Fundamental Analysis\n        output$stockNews <- DT::renderDataTable({\n                source('stockNews.R')\n                withProgress(message = 'Downloading News', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.01)\n                        }\n                })\n                newsDF <- stockNewsDF(input$ticker)\n                return(newsDF)\n        })\n        source('finreports.R')\n        df.key.ratios <- reactive({\n                return(getRatios(input$ticker))\n                })\n        profitability <- reactive({\n                df.key.ratios <- df.key.ratios()\n                return(df.key.ratios$data[[2]])\n                })\n        df.stats <- reactive({\n                return(getStats(input$ticker))\n        })\n        df.financials <- reactive({\n                return(getFinancials(input$ticker))\n        })\n        output$YFinancials <- DT::renderDataTable({\n                data <- input_data()\n                withProgress(message = 'Gathering Financial Data', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.01)\n                        }\n                })\n                return(YkeyFinancials(df.financials(),df.key.ratios(),data))\n        })\n        output$QFinancials <- DT::renderDataTable({\n                data <- input_data()\n                withProgress(message = 'Gathering Financial Data', value = 0, {\n                        for (i in 1:15) {\n                                incProgress(1/15)\n                                Sys.sleep(0.01)\n                        }\n                })\n                return(QkeyFinancials(df.financials(),df.key.ratios(),data))\n        })\n        #End Income reports\n\n        \n        \n        # Stock Graphs\n        output$candlestick<- renderDygraph({\n                source('sharePricePlot.R')\n                data <- cutdata()\n                chart <- sharePricePlot(data)\n                return(chart)\n        })\n        \n        output$sharePrice2<- renderDygraph({\n                source('sharePricePlot2.R')\n                data <- cutdata()\n                chart <- sharePricePlot2(data)\n                return(chart)\n        })\n        output$technicals<- renderDygraph({\n                source('technicalChart.R')\n                data <- cutdata()\n                chart <- technicalChart(data)\n                return(chart)\n        })\n\n        # Copper Graphs\n        output$COTGraph<- renderDygraph({\n                source('copperCOTC.R')\n                chart <- COTGraph()\n                return(chart)\n        })\n        output$LMEInvGraph<- renderDygraph({\n                source('copperCOTC.R')\n                chart <- LMEInvGraph()\n                return(chart)\n        })\n        output$BackwardationGraph<- renderDygraph({\n                source('copperCOTC.R')\n                chart <- BackwardationGraph()\n                return(chart)\n        })\n        #Copper News Analysis\n        output$newsDF <- DT::renderDataTable({\n                source('copperNews.R')\n                newsDF <- copperNewsDT()\n                return(newsDF)\n        })\n        \n        # Crude Oil GRaphs\n        output$importsGraph<- renderDygraph({\n                source('USCrudeGraphs.R')\n                chart <- importsGraph()\n                return(chart)\n        })\n        output$oilStocks<- renderDygraph({\n                source('USCrudeGraphs.R')\n                chart <- oilStocks()\n                return(chart)\n                })\n        output$supplyGraph<- renderDygraph({\n                source('USCrudeGraphs.R')\n                chart <- supplyGraph()\n                return(chart)\n                })\n        output$importsAvgGraph<- renderDygraph({\n                source('USCrudeGraphs.R')\n                chart <- importsAvgGraph()\n                return(chart)\n                })\n        \n})\n\n\n\n\n\n\n\n\n",
    "created" : 1497004949234.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1852677565",
    "id" : "22AA5873",
    "lastKnownWriteTime" : 1497261555,
    "last_content_update" : 1497261555679,
    "path" : "~/Desktop/AOTC-B/shinyApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}