{
    "collab_server" : "",
    "contents" : "\nlibrary(data.table)\nlibrary(XBRL)\nlibrary(curl)\n\nGetFinancialYearly <- function(ticker) {\n        \n        ##   This is here to please R CMD check\n        description <- NULL\n        roleId <- NULL\n        labelRole <- NULL\n        labelString <- NULL\n        unitId <- NULL\n        fact <- NULL\n        contextId <- NULL\n        startDate <- NULL\n        endDate <- NULL\n        \n        \n\n        ##   Function to download Instance Document\n        GetInstFile <- function(url) {\n                xbrlDoAll(url, cache.dir= 'xbrl.cache', prefix.out =\"out\", verbose=FALSE)\n        }\n        options(stringsAsFactors = FALSE,download.file.method = 'curl')\n        this <- GetInstFile(url = 'https://www.sec.gov/Archives/edgar/data/1326801/000132680115000006/fb-20141231.xml')\n        \n        edgarFiles <- fread('data/tempEdgar.csv')\n        edgarFiles$DATE_FILED <- as.Date(edgarFiles$DATE_FILED)\n        urls <- edgarFiles$INST[edgarFiles$Ticker == toupper(ticker) &\n                                        edgarFiles$FORM_TYPE == '10-K' &\n                                        edgarFiles$reportPeriod > as.Date('2013-01-01')]\n        \n        ##   Download Instance Document\n        instanceFiles <- lapply(urls,GetInstFile)\n        \n        \n        GetInstFile(urls[1])\n        \n        ##   Clear Cache Dir\n        file.remove(\"out_calculations.csv\", \"out_contexts.csv\", \"out_definitions.csv\", \n                    \"out_elements.csv\", \"out_facts.csv\", \"out_footnotes.csv\", \n                    \"out_labels.csv\", \"out_presentations.csv\", \"out_roles.csv\", \"out_units.csv\")\n        \n        unlink(\"XBRLcache\", recursive = TRUE)\n        \n        ##   Get Role ID from Instance Document\n        role.df <- instFile$role %>%\n                filter(toupper(description) %in% statement.type)\n        \n        role.id <- as.character(role.df$roleId)\n        \n        ##   Create statement template from Presentation Linkbase\n        statement.skeleton <-\n                instFile$presentation %>%\n                filter(roleId == role.id)\n        \n        rowid <- c(1:nrow(statement.skeleton))\n        statement.skeleton <- mutate(statement.skeleton, rowid = rowid)\n        \n        ##   Merge with Label Linkbase\n        statement <-\n                merge(statement.skeleton, instFile$label, by.x = \"toElementId\", \n                      by.y = \"elementId\") %>%\n                filter(labelRole == \"http://www.xbrl.org/2003/role/label\")\n        \n        ##   Merge with Fact Linkbase\n        statement <- merge(statement, instFile$fact, by.x = \"toElementId\", \n                           by.y = \"elementId\")\n        \n        ##   Merge with Context Linkbase\n        statement <- merge(statement, instFile$context, by.x = \"contextId\", \n                           by.y = \"contextId\") %>%\n                arrange(rowid)\n        \n        ##   Clean combined table\n        statement <- subset(statement, is.na(statement$dimension1))\n        \n        clean.statement <- select(statement, labelString, unitId, fact, contextId, \n                                  startDate, endDate, rowid)\n        clean.statement <- select(clean.statement, -contextId)\n        \n        colnames(clean.statement)[1] <- \"Metric\"\n        colnames(clean.statement)[2] <- \"Units\"\n        colnames(clean.statement)[3] <- \"Amount\"\n        \n        clean.statement <- arrange(clean.statement, rowid)\n        clean.statement <- select(clean.statement, -rowid)\n        return(clean.statement)\n}",
    "created" : 1497365628154.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1084193161",
    "id" : "ACEB50B5",
    "lastKnownWriteTime" : 1497345387,
    "last_content_update" : 1497345387,
    "path" : "~/Desktop/AOTC/shinyApp/finReportHelp.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}