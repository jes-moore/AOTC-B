library(doParallel)
??doParallel
cl <- makeCluster(8)
registerDoParallel(cl)
stopCluster(cl)
stockTickers <- as.vector(read.csv('data/tickers.csv'))
str(stockTickers)
stockTickers <- as.vector(fread('data/tickers.csv'))
library(lubridate)
library(data.table)
ticker <- 'fb'
stockTickers <- as.vector(fread('data/tickers.csv'))
options(stringsAsFactors = FALSE,download.file.method = 'curl')
str(stockTickers)
stockTickers <- as.vector(fread('data/tickers.csv'))
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)
nrow(stockTickers)
foreach(i=1:8) %dopar% {
getInfo(stockTickers[[i]])
}
foreach(i=1:8, .packages=c('XBRL','finreport') ) %dopar% {
getInfo(stockTickers[[i]])
}
foreach(i=1:8, .packages=c('XBRL','finreportr') ) %dopar% {
getInfo(stockTickers[[i]])
}
stockTickers[[i]]
stockTickers[[1]]
stockTickers[[2]]
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
foreach(i=1:8, .packages=c('XBRL','finreportr') ) %dopar% {
getInfo(stockTickers[[i]])
}
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
ticker <- 'fb'
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
for(i in 1:length(stockTickers)) {
getInfo(stockTickers(i))
if(i %% 5 == 0) print(i)
}
for(i in 1:length(stockTickers)) {
getInfo(stockTickers[i]
if(i %% 5 == 0) print(i)
}
for(i in 1:length(stockTickers)) {
getInfo(stockTickers[i])
if(i %% 5 == 0) print(i)
}
for(i in 1:length(stockTickers)) {
try(getInfo(stockTickers[i]))
if(i %% 5 == 0) print(i)
}
tempdir()
cd
cd()
getwd()
paste(getwd(),'/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = '')
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
getISInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(6)
registerDoParallel(cl)
foreach(i=1:6,.export = c('getInfo'),.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
stopCluster(cl)
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(6)
registerDoParallel(cl)
foreach(i=1:1,.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
foreach(i=2:2,.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
foreach(i=3:3,.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
foreach(i=3:3,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
getDoParWorkers()
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(data.table)
library(lubridate)
library(doParallel)
?registerDoParallel
?makeCluster
?registerDoParallel
cl <- makeCluster(6)
registerDoParallel(cl = cl,cores = 6)
registerDoMC
getDoParWorkers()
getDoParName()
foreach(i=1:6,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
library(doParallel)
getDoParWorkers()
?makeCluster
library(doParallel)
library(doParallel)
registerDoParallel(12)
getDoParWorkers()
stopCluster()
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(data.table)
ticker <- 'fb'
library(lubridate)
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
library(finreportr)
library(curl)
install.packages('finreport')
library(curl)
install.packages('finreportr')
install.packages('doParallel')
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
install.packages('lubridate')
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
ticker <- 'fb'
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
getwd()
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/hinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)
foreach(i=1:8,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
ticker <- 'fb'
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl,cores = 4)
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
getInfo <- function(ticker){
try(IS <- GetIncome(ticker, 2017)[,c(1,3,5)])
try(fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = '')))
try(BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)])
try(fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = '')))
try(CF <- GetCashFlow(ticker,2017)[,c(1,3,5)])
try(fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = '')))
}
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
stopCluster(cl)
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table'),.errorhandling='remove') %dopar% {
try(getInfo(stockTickers[[i]]))
}
cl <- makeCluster(4)
registerDoParallel(cl,cores = 4)
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table'),.errorhandling='remove') %dopar% {
try(getInfo(stockTickers[[i]]))
}
stopCluster(cl)
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table'),.errorhandling='remove') %dopar% {
try(getInfo(stockTickers[[i]]))
}
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl,cores = 8)
foreach(i=1:16,.packages=c('XBRL','finreportr','data.table'),.errorhandling='remove') %dopar% {
try(getInfo(stockTickers[[i]]))
}
stopCluster(cl)
stopCluster(cl)
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
for(i in 1:length(stockTickers)) {
try(getInfo(stockTickers[i]))
if(i %% 5 == 0) print(i)
}
stockTickers
stockTickers[1:50]
stockTickers[1:100]
ticker <- 'A'
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
IS <- GetIncome(ticker, 2016)[,c(1,3,5)]
View(IS)
?tryCatch
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
ticker <- 'fb'
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
IS <- GetIncome(ticker, 2016)[,c(1,3,5)]
??XBRL
?GetIncome
library(curl)
library(dplyr)
GetFinancial2 <- function(statement.type, symbol, year) {
##   This is here to please R CMD check
description <- NULL
roleId <- NULL
labelRole <- NULL
labelString <- NULL
unitId <- NULL
fact <- NULL
contextId <- NULL
startDate <- NULL
endDate <- NULL
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("https://www.sec.gov/Archives/edgar/data/", CIK, "/",
accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url, cache.dir=NULL, prefix.out ="out", verbose=FALSE)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- tryCatch(is.list(httr::GET(inst.url)), error = function(e) {return(FALSE)})
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
##   Clear Cache Dir
file.remove("out_calculations.csv", "out_contexts.csv", "out_definitions.csv",
"out_elements.csv", "out_facts.csv", "out_footnotes.csv",
"out_labels.csv", "out_presentations.csv", "out_roles.csv", "out_units.csv")
unlink("XBRLcache", recursive = TRUE)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) %in% statement.type)
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
rowid <- c(1:nrow(statement.skeleton))
statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
##   Merge with Label Linkbase
statement <-
merge(statement.skeleton, instFile$label, by.x = "toElementId",
by.y = "elementId") %>%
filter(labelRole == "http://www.xbrl.org/2003/role/label")
##   Merge with Fact Linkbase
statement <- merge(statement, instFile$fact, by.x = "toElementId",
by.y = "elementId")
##   Merge with Context Linkbase
statement <- merge(statement, instFile$context, by.x = "contextId",
by.y = "contextId") %>%
arrange(rowid)
##   Clean combined table
statement <- subset(statement, is.na(statement$dimension1))
clean.statement <- select(statement, labelString, unitId, fact, contextId,
startDate, endDate, rowid)
clean.statement <- select(clean.statement, -contextId)
colnames(clean.statement)[1] <- "Metric"
colnames(clean.statement)[2] <- "Units"
colnames(clean.statement)[3] <- "Amount"
clean.statement <- arrange(clean.statement, rowid)
clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
source('~/Desktop/AOTC-B/databases/GetFinancial2.R')
View(IS)
ticker <- 'A'
ticker <- 'A'
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
if(class(IS) == 'try-error'){
IS <- try(GetIncome2(ticker, 2016)[,c(1,3,5)])
}
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
if(class(IS) == 'try-error'){
IS <- try(GetIncome2(ticker, 2016)[,c(1,3,5)])
}
IS
ticker <- 'A'
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
if(class(IS) == "try-error"){
IS <- try(GetIncome2(ticker, 2016)[,c(1,3,5)])
}
library(finreportr)
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
library(finreportr)
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
?getAccessionNo
??GetAccesionNo
source('~/Desktop/AOTC-B/databases/GetFinancial2.R')
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
if(class(IS) == "try-error"){
IS <- try(GetIncome2(ticker, 2016)[,c(1,3,5)])
}
source('~/Desktop/AOTC-B/databases/GetFinancial2.R')
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
if(class(IS) == "try-error"){
IS <- try(GetIncome2(ticker, 2016)[,c(1,3,5)])
}
?fwrite
?write.csv
?write.csv2
write.csv(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
write.csv(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
write.csv(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
write.csv(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
write.csv2(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
ticker <- 'fb'
i=1
dir.create('file.path(/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/', stockTickers[i], showWarnings = FALSE)
dir.create('file.path(/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/', stockTickers[i])
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
library(dplyr)
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- try(GetIncome2(ticker, 2017)[,c(1,3,5)])
if(class(IS) == "try-error"){
IS <- try(GetIncome2(ticker, 2016)[,c(1,3,5)])
if(class(IS) == 'try-error'){
return(IS)
}
}
try(fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = '')))
BS <- try(GetBalanceSheet2(ticker, 2017)[,c(1,3,5)])
if(class(BS) == "try-error"){
BS <- try(GetBalanceSheet2(ticker, 2016)[,c(1,3,5)])
if(class(BS) == 'try-error'){
return(BS)
}
}
try(fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = '')))
CF <- try(GetCashFlow2(ticker,2017)[,c(1,3,5)])
if(class(CF) == 'try-error'){
CF <- try(GetCashFlow2(ticker, 2016)[,c(1,3,5)])
if(class(CF) == 'try-error'){
return(IS)
}
}
try(fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = '')))
}
source('~/Desktop/AOTC-B/databases/GetFinancial2.R')
library(doParallel)
library(doParallel)
start.time <- Sys.time() # Time code
cl <- makeCluster(16)
registerDoParallel(cl)
foreach(i=1:500,.packages=c('XBRL','finreportr','data.table','dplyr','curl')) %dopar% {
options(stringsAsFactors = FALSE,download.file.method = 'curl')
try(getInfo(stockTickers[[i]]))
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
stopCluster(cl)
hello
library(doParallel)
start.time <- Sys.time() # Time code
cl <- makeCluster(16)
registerDoParallel(cl)
foreach(i=501:600,.packages=c('XBRL','finreportr','data.table','dplyr','curl')) %dopar% {
options(stringsAsFactors = FALSE,download.file.method = 'curl')
try(getInfo(stockTickers[[i]]))
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
stopCluster(cl)
