stockTickers <- as.vector(read.csv('data/tickers.csv'))
library(finstr)
install.packages('finstr')
library(finstr)
library(devtools)
install_github("bergant/finstr")
library(finreport)
library(finreportr)
ticker <- 'fb'
GetIncome(ticker, 2013)
library(curl)
library(XBRL)
GetIncome(ticker, 2013)
GetInstFile <- function(url) {
xbrlDoAll(url, cache.dir= 'xbrl.cache', prefix.out ="out", verbose=FALSE)
}
options(stringsAsFactors = FALSE,download.file.method = 'curl')
GetIncome(ticker, 2013)
GetIncome(ticker, 2017)
head(GetIncome(ticker, 2017))
IS <- GetIncome(ticker, 2017)
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
library(lubridate)
IS
library(data.table)
fwrite(IS,paste('../shinyApp/data/income_statements/',ticker,'.csv',sep = ''))
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/income_statements/',ticker,'.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/balance_sheets/',ticker,'.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/cash_flow/',ticker,'.csv',sep = ''))
IS <- GetIncome(ticker, 2017)
fwrite(IS,paste('../shinyApp/data/income_statements/',ticker,'.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)
fwrite(BS,paste('../shinyApp/data/balance_sheets/',ticker,'.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)
fwrite(CF,paste('../shinyApp/data/cash_flow/',ticker,'.csv',sep = ''))
?GetIncome
IS <- GetIncome(ticker, 2017)
fwrite(IS,paste('../shinyApp/data/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)
fwrite(BS,paste('../shinyApp/data/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)
fwrite(CF,paste('../shinyApp/data/cash_flow/',ticker,'_cf.csv',sep = ''))
head(IS)
install.packages('data.table')
install.packages('doParallel')
library(doParallel)
??doParallel
cl <- makeCluster(8)
registerDoParallel(cl)
stopCluster(cl)
stockTickers <- as.vector(read.csv('data/tickers.csv'))
str(stockTickers)
stockTickers <- as.vector(fread('data/tickers.csv'))
library(lubridate)
library(data.table)
ticker <- 'fb'
stockTickers <- as.vector(fread('data/tickers.csv'))
options(stringsAsFactors = FALSE,download.file.method = 'curl')
str(stockTickers)
stockTickers <- as.vector(fread('data/tickers.csv'))
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)
nrow(stockTickers)
foreach(i=1:8) %dopar% {
getInfo(stockTickers[[i]])
}
foreach(i=1:8, .packages=c('XBRL','finreport') ) %dopar% {
getInfo(stockTickers[[i]])
}
foreach(i=1:8, .packages=c('XBRL','finreportr') ) %dopar% {
getInfo(stockTickers[[i]])
}
stockTickers[[i]]
stockTickers[[1]]
stockTickers[[2]]
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
foreach(i=1:8, .packages=c('XBRL','finreportr') ) %dopar% {
getInfo(stockTickers[[i]])
}
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
ticker <- 'fb'
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('../shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('../shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('../shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
for(i in 1:length(stockTickers)) {
getInfo(stockTickers(i))
if(i %% 5 == 0) print(i)
}
for(i in 1:length(stockTickers)) {
getInfo(stockTickers[i]
if(i %% 5 == 0) print(i)
}
for(i in 1:length(stockTickers)) {
getInfo(stockTickers[i])
if(i %% 5 == 0) print(i)
}
for(i in 1:length(stockTickers)) {
try(getInfo(stockTickers[i]))
if(i %% 5 == 0) print(i)
}
tempdir()
cd
cd()
getwd()
paste(getwd(),'/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = '')
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
getISInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(6)
registerDoParallel(cl)
foreach(i=1:6,.export = c('getInfo'),.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
stopCluster(cl)
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(6)
registerDoParallel(cl)
foreach(i=1:1,.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
foreach(i=2:2,.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
foreach(i=3:3,.packages=c('XBRL','finreportr')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
foreach(i=3:3,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
getDoParWorkers()
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(data.table)
library(lubridate)
library(doParallel)
?registerDoParallel
?makeCluster
?registerDoParallel
cl <- makeCluster(6)
registerDoParallel(cl = cl,cores = 6)
registerDoMC
getDoParWorkers()
getDoParName()
foreach(i=1:6,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
library(finreportr)
library(curl)
library(XBRL)
library(lubridate)
library(data.table)
library(doParallel)
getDoParWorkers()
?makeCluster
library(doParallel)
library(doParallel)
registerDoParallel(12)
getDoParWorkers()
stopCluster()
stopCluster(cl)
library(finreportr)
library(curl)
library(XBRL)
library(data.table)
ticker <- 'fb'
library(lubridate)
stockTickers <- as.vector(fread('data/tickers.csv')[[1]])
options(stringsAsFactors = FALSE,download.file.method = 'curl')
getInfo <- function(ticker){
IS <- GetIncome(ticker, 2017)[,c(1,3,5)]
fwrite(IS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/income_statements/',ticker,'_is.csv',sep = ''))
BS <- GetBalanceSheet(ticker, 2017)[,c(1,3,5)]
fwrite(BS,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/balance_sheets/',ticker,'_bs.csv',sep = ''))
CF <- GetCashFlow(ticker,2017)[,c(1,3,5)]
fwrite(CF,paste('C:/Users/User/Desktop/AOTC-B/shinyApp/data/Yearly/cash_flow/',ticker,'_cf.csv',sep = ''))
}
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=1:4,.packages=c('XBRL','finreportr','data.table')) %dopar% {
try(getInfo(stockTickers[[i]]))
}
