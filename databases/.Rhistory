instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
thisInst
instances
instances[instances$Ticker == 'AAWW']
instances[instances$Ticker == 'AAWW',]
instances[instances$Ticker == 'AIR',]
GetURL3 <- function(symbol,quarter) {
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
getQuarterly <- function(ticker){
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,5)])
IS <- try(rbind(IS1,IS2))
if(class(IS) == "try-error"){
IS <- try(IS1)
if(class(IS) == 'try-error'){
return(IS)
}
}
(fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/income_statements/',ticker,'_is.csv',sep = '')))
BS1 <- try(GetBalanceSheet3(ticker, 1)[,c(1,3,5)])
BS2 <- try(GetBalanceSheet3(ticker, 2)[,c(1,3,5)])
BS <- try(rbind(BS1,BS2))
if(class(BS) == "try-error"){
BS <- try(BS1)
if(class(BS) == 'try-error'){
return(BS)
}
}
(fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/balance_sheets/',ticker,'_bs.csv',sep = '')))
CF1 <- try(GetCashFlow3(ticker, 1)[,c(1,3,5)])
CF2 <- try(GetCashFlow3(ticker, 2)[,c(1,3,5)])
CF <- try(rbind(CF1,CF2))
if(class(CF) == "try-error"){
CF <- try(CF1)
if(class(CF) == 'try-error'){
return(CF)
}
}
(fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/cash_flow/',ticker,'_cf.csv',sep = '')))
}
options(stringsAsFactors = FALSE,download.file.method = 'curl')
for(i in 11) {
try(getQuarterly(stockTickers[i]))
print(i)
}
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
thisInst
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
else {
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
GetURL3 <- function(symbol,quarter) {
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
else {
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
}
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
thisInst
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url,delete.cached.inst = TRUE, cache.dir=as.character(paste('/home/jmo/Desktop/AOTC-B/databases/data/xbrl.cache/',toupper(symbol),sep='')), prefix.out ="out", verbose=FALSE)
}
inst.url <- GetURL3(symbol,quarter)
check <- tryCatch(is.list(httr::GET(inst.url)), error = function(e) {return(FALSE)})
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
instFile <- GetInstFile(inst.url)
inst.url
thisInst <- thisInst$INST[[quarter]]
thisInst <- sub('air','aaww',thisInst)
thisInst
quarter = 2
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
thisInst <- sub('air','aaww',thisInst)
return(thisInst)
}
thisInst
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
thisInst <- sub('air','aaww',thisInst)
thisInst
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
getQuarterly <- function(ticker){
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,5)])
IS <- try(rbind(IS1,IS2))
if(class(IS) == "try-error"){
IS <- try(IS1)
if(class(IS) == 'try-error'){
return(IS)
}
}
(fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/income_statements/',ticker,'_is.csv',sep = '')))
BS1 <- try(GetBalanceSheet3(ticker, 1)[,c(1,3,5)])
BS2 <- try(GetBalanceSheet3(ticker, 2)[,c(1,3,5)])
BS <- try(rbind(BS1,BS2))
if(class(BS) == "try-error"){
BS <- try(BS1)
if(class(BS) == 'try-error'){
return(BS)
}
}
(fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/balance_sheets/',ticker,'_bs.csv',sep = '')))
CF1 <- try(GetCashFlow3(ticker, 1)[,c(1,3,5)])
CF2 <- try(GetCashFlow3(ticker, 2)[,c(1,3,5)])
CF <- try(rbind(CF1,CF2))
if(class(CF) == "try-error"){
CF <- try(CF1)
if(class(CF) == 'try-error'){
return(CF)
}
}
(fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/cash_flow/',ticker,'_cf.csv',sep = '')))
}
options(stringsAsFactors = FALSE,download.file.method = 'curl')
for(i in 11) {
try(getQuarterly(stockTickers[i]))
print(i)
}
symbol = 'a'
symbol = 'aa'
ticker = 'aa'
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisINST
thisInsT
thisInst
GetURL3 <- function(symbol,quarter) {
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
thisInst <- sub('air','aaww',thisInst)
return(thisInst)
}
else {
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
}
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url,delete.cached.inst = TRUE, cache.dir=as.character(paste('/home/jmo/Desktop/AOTC-B/databases/data/xbrl.cache/',toupper(symbol),sep='')), prefix.out ="out", verbose=FALSE)
}
inst.url <- GetURL3(symbol,quarter)
check <- tryCatch(is.list(httr::GET(inst.url)), error = function(e) {return(FALSE)})
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
instFile <- GetInstFile(inst.url)
file.remove("out_calculations.csv", "out_contexts.csv", "out_definitions.csv",
"out_elements.csv", "out_facts.csv", "out_footnotes.csv",
"out_labels.csv", "out_presentations.csv", "out_roles.csv", "out_units.csv")
inst.url
stockTicker[1:20]
stockTickers[1:20]
for(i in 20) {
try(getQuarterly(stockTickers[i]))
print(i)
}
for(i in 21:30) {
try(getQuarterly(stockTickers[i]))
print(i)
}
stockTickers[c(22,24,25,26,27,30)]
stockTickers[c(22,25,26,27,30)]
symbol = 'ACGL'
GetURL3 <- function(symbol,quarter) {
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
thisInst <- sub('air','aaww',thisInst)
return(thisInst)
}
else {
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
}
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url,delete.cached.inst = TRUE, cache.dir=as.character(paste('/home/jmo/Desktop/AOTC-B/databases/data/xbrl.cache/',toupper(symbol),sep='')), prefix.out ="out", verbose=FALSE)
}
inst.url <- GetURL3(symbol,quarter)
check <- tryCatch(is.list(httr::GET(inst.url)), error = function(e) {return(FALSE)})
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
instFile <- GetInstFile(inst.url)
file.remove("out_calculations.csv", "out_contexts.csv", "out_definitions.csv",
"out_elements.csv", "out_facts.csv", "out_footnotes.csv",
"out_labels.csv", "out_presentations.csv", "out_roles.csv", "out_units.csv")
unlink("XBRLcache", recursive = TRUE)
role.df <- instFile$role %>%
filter(toupper(description) %in% toupper(statement.type))
instFile$role$description
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
symbol
for(i in 30) {
try(getQuarterly(stockTickers[i]))
print(i)
}
role.df <- instFile$role %>%
filter(toupper(description) %in% toupper(statement.type))
instFile$role$description
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
getQuarterly <- function(ticker){
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,4,5)])
IS <- try(rbind(IS1,IS2))
if(class(IS) == "try-error"){
IS <- try(IS1)
if(class(IS) == 'try-error'){
return(IS)
}
}
(fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/income_statements/',ticker,'_is.csv',sep = '')))
BS1 <- try(GetBalanceSheet3(ticker, 1)[,c(1,3,4,5)])
BS2 <- try(GetBalanceSheet3(ticker, 2)[,c(1,3,4,5)])
BS <- try(rbind(BS1,BS2))
if(class(BS) == "try-error"){
BS <- try(BS1)
if(class(BS) == 'try-error'){
return(BS)
}
}
(fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/balance_sheets/',ticker,'_bs.csv',sep = '')))
CF1 <- try(GetCashFlow3(ticker, 1)[,c(1,3,4,5)])
CF2 <- try(GetCashFlow3(ticker, 2)[,c(1,3,4,5)])
CF <- try(rbind(CF1,CF2))
if(class(CF) == "try-error"){
CF <- try(CF1)
if(class(CF) == 'try-error'){
return(CF)
}
}
(fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/cash_flow/',ticker,'_cf.csv',sep = '')))
}
options(stringsAsFactors = FALSE,download.file.method = 'curl')
for(i in 30) {
try(getQuarterly(stockTickers[i]))
print(i)
}
for(i in 30:200) {
try(getQuarterly(stockTickers[i]))
print(i)
}
stockFilters[c(32,36,37,38,41)]
stockTickers[c(32,36,37,38,41)]
symbol <- 'ACHN'
ticker <- symbol
GetURL3 <- function(symbol,quarter) {
instances <- fread('data/tempEdgar.csv')
instances <- instances[!duplicated(instances),]
if(symbol == 'AAWW'){
thisInst <- arrange(
instances[instances$Ticker == toupper('air') &
instances$FORM_TYPE == '10-Q' &
instances$COMPANY_NAME == 'ATLAS AIR WORLDWIDE HOLDINGS INC'],
desc(reportPeriod)
)
thisInst <- thisInst$INST[[quarter]]
thisInst <- sub('air','aaww',thisInst)
return(thisInst)
}
else {
thisInst <- arrange(instances[instances$Ticker == toupper(symbol) & instances$FORM_TYPE == '10-Q'],desc(reportPeriod))
thisInst <- thisInst$INST[[quarter]]
return(thisInst)
}
}
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url,delete.cached.inst = TRUE, cache.dir=as.character(paste('/home/jmo/Desktop/AOTC-B/databases/data/xbrl.cache/',toupper(symbol),sep='')), prefix.out ="out", verbose=FALSE)
}
inst.url <- GetURL3(symbol,quarter)
check <- tryCatch(is.list(httr::GET(inst.url)), error = function(e) {return(FALSE)})
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
instFile <- GetInstFile(inst.url)
file.remove("out_calculations.csv", "out_contexts.csv", "out_definitions.csv",
"out_elements.csv", "out_facts.csv", "out_footnotes.csv",
"out_labels.csv", "out_presentations.csv", "out_roles.csv", "out_units.csv")
unlink("XBRLcache", recursive = TRUE)
role.df <- instFile$role %>%
filter(toupper(description) %in% toupper(statement.type))
instFile$role$description
for(i in 32) {
try(getQuarterly(stockTickers[i]))
print(i)
}
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
getQuarterly <- function(ticker){
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,4,5)])
IS <- try(rbind(IS1,IS2))
if(class(IS) == "try-error"){
IS <- try(IS1)
if(class(IS) == 'try-error'){
return(IS)
}
}
(fwrite(IS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/income_statements/',ticker,'_is.csv',sep = '')))
BS1 <- try(GetBalanceSheet3(ticker, 1)[,c(1,3,4,5)])
BS2 <- try(GetBalanceSheet3(ticker, 2)[,c(1,3,4,5)])
BS <- try(rbind(BS1,BS2))
if(class(BS) == "try-error"){
BS <- try(BS1)
if(class(BS) == 'try-error'){
return(BS)
}
}
(fwrite(BS,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/balance_sheets/',ticker,'_bs.csv',sep = '')))
CF1 <- try(GetCashFlow3(ticker, 1)[,c(1,3,4,5)])
CF2 <- try(GetCashFlow3(ticker, 2)[,c(1,3,4,5)])
CF <- try(rbind(CF1,CF2))
if(class(CF) == "try-error"){
CF <- try(CF1)
if(class(CF) == 'try-error'){
return(CF)
}
}
(fwrite(CF,paste('/home/jmo/Desktop/AOTC-B/shinyApp/data/Quarterly/cash_flow/',ticker,'_cf.csv',sep = '')))
}
for(i in 32) {
try(getQuarterly(stockTickers[i]))
print(i)
}
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,4,5)])
ticker
statement.type <- c("CONSOLIDATED STATEMENTS OF INCOME",
"CONDENSED CONSOLIDATED STATEMENTS OF INCOME",
"CONSOLIDATED STATEMENT OF INCOME",
"CONDENSED CONSOLIDATED STATEMENT OF INCOME",
"CONSOLIDATED STATEMENTS OF OPERATIONS",
"CONDENSED CONSOLIDATED STATEMENTS OF OPERATIONS",
"CONSOLIDATED STATEMENT OF OPERATIONS",
"CONDENSED CONSOLIDATED STATEMENT OF OPERATIONS",
"CONSOLIDATED STATEMENT OF EARNINGS",
"CONDENSED CONSOLIDATED STATEMENT OF EARNINGS",
"CONSOLIDATED STATEMENTS OF EARNINGS",
"CONDENSED CONSOLIDATED STATEMENTS OF EARNINGS",
"INCOME STATEMENTS",
"CONDENSED INCOME STATEMENTS",
"Consolidated Condensed Statements of Income (Loss) (Unaudited)",
"Consolidated Condensed Statements of Income (Loss)",
"Condensed Consolidated Statements of Income (Loss) (Unaudited)",
"CondensedConsolidated Statements of Income (Loss)",
#"CONDENSED CONSOLIDATED STATEMENT OF COMPREHENSIVE INCOME (LOSS) (Unaudited)",
#"CONDENSED CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (LOSS) (Unaudited)",
"CONSOLIDATED STATEMENTS OF INCOME (UNAUDITED)",
"CONDENSED CONSOLIDATED STATEMENTS OF INCOME (UNAUDITED)",
"CONSOLIDATED STATEMENT OF INCOME (UNAUDITED)",
"CONDENSED CONSOLIDATED STATEMENT OF INCOME (UNAUDITED)",
"CONSOLIDATED STATEMENTS OF OPERATIONS (UNAUDITED)",
"CONDENSED CONSOLIDATED STATEMENTS OF OPERATIONS (UNAUDITED)",
"CONSOLIDATED STATEMENT OF OPERATIONS (UNAUDITED)",
"CONDENSED CONSOLIDATED STATEMENT OF OPERATIONS (UNAUDITED)",
"CONSOLIDATED STATEMENT OF EARNINGS (UNAUDITED)",
"CONDENSED CONSOLIDATED STATEMENT OF EARNINGS (UNAUDITED)",
"CONSOLIDATED STATEMENTS OF EARNINGS (UNAUDITED)",
"CONDENSED CONSOLIDATED STATEMENTS OF EARNINGS (UNAUDITED)",
"INCOME STATEMENTS (UNAUDITED)",
"CONDENSED INCOME STATEMENTS (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENTS OF INCOME",
"CONSOLIDATED CONDENSED STATEMENT OF INCOME",
"CONSOLIDATED CONDENSED STATEMENTS OF OPERATIONS",
"CONSOLIDATED CONDENSED STATEMENT OF OPERATIONS",
"CONSOLIDATED CONDENSED STATEMENT OF EARNINGS",
"CONSOLIDATED CONDENSED STATEMENTS OF EARNINGS",
#"CONSOLIDATED CONDENSED STATEMENT OF COMPREHENSIVE INCOME (LOSS) (UNAUDITED)",
#"CONSOLIDATED CONDENSED STATEMENTS OF COMPREHENSIVE INCOME (LOSS) (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENTS OF INCOME (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENT OF INCOME (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENTS OF OPERATIONS (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENT OF OPERATIONS (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENT OF EARNINGS (UNAUDITED)",
"CONSOLIDATED CONDENSED STATEMENTS OF EARNINGS (UNAUDITED)",
"Unaudited Consolidated Statements of Operations",
"Unaudited Consolidated Statements of Income",
"Unaudited Consolidated Statement of Income",
"Unaudited Consolidated Statement of Operations",
"Unaudited Consolidated Statements of Earnings",
"Unaudited Consolidated Statement of Earnings")
role.df <- instFile$role %>%
filter(toupper(description) %in% toupper(statement.type))
role.df
instFile$role$description
statement.type <- 'Statements of Comprehensive Loss'
role.df <- instFile$role %>%
filter(toupper(description) %in% toupper(statement.type))
role.df
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,4,5)])
IS1
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,4,5)])
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
source('~/Desktop/AOTC-B/databases/getFinancial3.R')
IS1 <- try(GetIncome3(ticker, 1)[,c(1,3,4,5)])
IS2 <- try(GetIncome3(ticker, 2)[,c(1,3,4,5)])
